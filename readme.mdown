ReadMe: Poetry Recommendations
==================================================

![screenshot of the homepage](/static/mainpage_screenshot.png)

#####  Welcome to the ReadMe for ReadMe: Poetry Recommendations!

There is an almost unfathomably large amount of poetry out in the world, and finding a poem that hits the right notes for an individual reader can be daunting at best. ReadMe is designed to help make this task easier by providing poetry recommendations based on the poems you know that you enjoy, or, in the case of our Writer's Mode, help you grow your own writing by exposing you to great poems that are similar in style to your own.

Our database contains over ten thousand poems which we look at to find the best match. Each time you search for recommendations, ReadMe will provide five distinct poems for you to read -- each based on a slightly different variation of our matching algorithm. In this way, when you indicate which recommendation you like best, we can improve the algorithm to provide even better and more reliable recommendations.

The data we gather on each poem is divided into four catagories:

- Macro Lexical Data: This is the information about the shape and flow of the poem (how long is it, whether it follows a strict form, etc.) These are traits you can see immediately upon viewing a poem.
- Micro Lexical Data: This is the information about the way language is employed in the poem (does it have a rhyme scheme, does it use alliteration, is there a narrative presence and if so to what degree, etc.)
- Sentiment Data: This is information about the sorts of language the poem uses (what percentage of the words in the poem are considered positive or negative? active or passive? etc.).
- Context Data: This is information that was provided by The Poetry Foundation, where we got our database -- the Poetry Foundation has poems catagorized by Subject (i.e. Romance, Living, The Mind), Poetic Term (i.e. Metaphor, Free Verse), and Region (i.e. U.S., Western).

Those interested in lexical analysis can view the data collected on individual poems, as well as across the corpus.

The Algorithm
----------------------------------
ReadMe utilizes a handwritten clustering algorithm which allows for direct control of different data point and prioritization.

ReadMe collects information on every poem in order make the best recommendations -- we split the types of information into four catagories as noted above. During the recommendation process, we compare all the collected data in order to find the most stylistically similar poems.

The final recommendations you see come from slight variations in how the algorithm weights the data coming in from each catagory -- one poem is the best recommendation if we value all data equally, one if we weight Macro Lexical Data as of greater importance, one if we weight Micro Lexical Data as of greater importance, and so on thrugh Sentiment Data and Context Data.

We shuffle the results before displaying them in order to control for a bias caused by the position of the result, and ask users to let us know which poem they like best in order to narrow in on which catagories users find more important. Users do this by selecting a heart icon next to their favorite match, which logs an instance of the match into our database (telling us which poem they liked best, which poem it was recommended based on, which weighting method was used, which order it was displayed on the page, and how good a match it was).

User feedback (selecting the best recommendation) allows us to adjust the weightings in our algorithm.


Features
----------------------------------

- Typeahead recommends poem titles from the database as you type your search.
- Search for any poem in the database and receive recommended poems.
- Alter search algorithm to allow display of multiple poems by the same author, and/or other poems by the author of the poem that a user is searching with.
- We recommend 5 poems for every search, and each of these employs a different weighting strategy for different sorts of data allowing for feedback to the system about which match readers like best, allowing us to hone in on meaningful data catagories.
- Submit your own poetry for analysis by the same model.
- View metrics for each poem, and relationships for all context data.
- Chart.js graphs explain data layout across corpus.
- Where applicable, links to Wikipedia page to learn more about a poet.
- 48% test coverage

Examples
---------------------------------

Here you can see the results page for a search on "Meditation at 50 Yards, Moving Target" by Rita Dove. Rita Dove has a wikipedia page in her honor, so we show the picture of her with a link to read more about the author. 

Below that, there are five poetry recommendations, all of which are active links to read the poem. Selecting the heart by one of these links will log your choice to our database to improve the algorith. As long as you are in the browser session, ReadMe will remember your choice for the best recommendation for any poem on which you have given feedback in that session. If you change your mind and select a new poem, it will log that as the best match and remember your most recent choice.

Selecting 'See Stats' on any of these poems will allow you to view the metrics for that poem.


![screenshot of the results page for a poem](/static/Results_Screenshot.png)


For every poetic term, region, and subject, we have an about page where you can view a complete list of associated poems, as well as a graph showing how that term, region, or subject interacts with others -- i.e. how many of the poems that are associated with the chosen item are also associated with others in its class.


![screenshot of a term page](/static/Term_Screenshot.png)


For our sentiment, micro lexical, and macro lexical characteristics, you can view the layout of scores across our corpus on their respective pages.


![screenshot of a macro graph](/static/Macro_Screenshot.png)


Tech Stack
--------------------------------
- Python
- Javascript
- JQuery
- Flask
- Jinja
- SQLite3
- SQLAlchemy
- Chart.js
- AJAX/JSON
- BeautifulSoup
- WebScraping
- Words API
- Bootstrap
- Twitter TypeAhead
- HTML
- CSS

Outside Resources
-----------------------------------------------
All poetry is from [The Poetry Foundation](http://www.poetryfoundation.org/), and I used the [Harvard General Inquirer Catagories](http://www.wjh.harvard.edu/~inquirer/) for tagged words in order to collect sentiment data, as well as the [Corpus of Contemporary American English](http://corpus.byu.edu/coca/) for it's list of most common english language words in order to guage how unusual the language is in each poem. The [Words API](https://www.wordsapi.com/) is in place as a backup for finding rhymes in our poetry, but most of the word finding rhymes is done by scraping [Rhymer](http://www.rhymer.com/), an online rhyming dictionary.

Running ReadMe
--------------------------------------
- Download all files, create a virtual environment, and pip install -r requirements.txt
```python
$ git clone https://github.com/kendramae/PoetryRecommendationEngine.git
$ virtualenv env
$ source env/bin/activate
```
- using sqlite3, seed the database from the .sql file
```python
$ sqlite3 poetry.db < poetry.sql
```
- if you want to use the Words API as a backup method for rhyming words, you'll need
to make an account with [Mashape](https://www.mashape.com/) and get a production key, which you'll save to your environment s WORDS_PRODUCTION_KEY, but the app will run without that (understand if you do this route, you won't have access to rhyme scores for new poems if Rhymer shuts down )

```python
$ echo "export WORDS_PRODUCTION_KEY='your production key here'" > secrets.sh
$ source secrets.sh
```
- run the server
```python
$ python server.py
```


The Author
-------------------------------------------------
ReadMe: Poetry Recommendations was created by Kendra Peterson, a software engineer and avid reader in California. Kendra completed the Software Engineering Felloship at Hackbright Academy and holds a degree in English Literature from Stanford University.

Learn more about Kendra at [LinkedIn](https://www.linkedin.com/in/kendramaepeterson).
